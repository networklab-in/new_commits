#--_uplink_cmd_array
_uplink_cmd_array,_tmp_up_vlan,_tmp_up_int,_tmp_cmd_array = {},["!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!","!],["!","!","!","!"],[]
_tmp_up_vlan_array,_tmp_up_int_array = {},{}
for _dev in _uplink_dev_array:
    _tmp_up_vlan_array[_dev]=[]
    _tmp_up_int_array[_dev]=[]
 
for _for in _legacy_dev_array:
    _uplink_cmd_array[_for] = {}
    for _dev in _glob_int_array[_for]:
        __i = 0
        try: _l = _glob_int_array[_for][_dev]
        except: _l = None
        if _l:
            for _int in _glob_int_array[_for][_dev]:
                _tmp_up_int[__i] = _int
                __i+=1
        __i=0
        for _vlan in _glob_vlan_array:
            _tmp_up_vlan[__i]=_vlan
            __i+=1
        _tmp_cmd_array = [
        "show vlan id "+_tmp_up_vlan[0]+" | i active","show run int Vlan"+_tmp_up_vlan[0],#0,1
        "show vlan id "+_tmp_up_vlan[1]+" | i active","show run int Vlan"+_tmp_up_vlan[1],#2,3
        "show vlan id "+_tmp_up_vlan[2]+" | i active","show run int Vlan"+_tmp_up_vlan[2],#4,5
        "show vlan id "+_tmp_up_vlan[3]+" | i active","show run int Vlan"+_tmp_up_vlan[3],#6,7
        "show vlan id "+_tmp_up_vlan[4]+" | i active","show run int Vlan"+_tmp_up_vlan[4],#8,9
        "show vlan id "+_tmp_up_vlan[5]+" | i active","show run int Vlan"+_tmp_up_vlan[5],#10,11
        "show vlan id "+_tmp_up_vlan[6]+" | i active","show run int Vlan"+_tmp_up_vlan[6],#12,13
        "show vlan id "+_tmp_up_vlan[7]+" | i active","show run int Vlan"+_tmp_up_vlan[7],#14,15
        "show vlan id "+_tmp_up_vlan[8]+" | i active","show run int Vlan"+_tmp_up_vlan[8],#16,17
        "show vlan id "+_tmp_up_vlan[9]+" | i active","show run int Vlan"+_tmp_up_vlan[9],#18,19
        "show vlan id "+_tmp_up_vlan[10]+" | i active","show run int Vlan"+_tmp_up_vlan[10],#20,21
        "show vlan id "+_tmp_up_vlan[11]+" | i active","show run int Vlan"+_tmp_up_vlan[11],#22,23
        "show vlan id "+_tmp_up_vlan[12]+" | i active","show run int Vlan"+_tmp_up_vlan[12],#24,25
        "show vlan id "+_tmp_up_vlan[13]+" | i active","show run int Vlan"+_tmp_up_vlan[13],#26,27
        "show vlan id "+_tmp_up_vlan[14]+" | i active","show run int Vlan"+_tmp_up_vlan[14],#28,29
        "show vlan id "+_tmp_up_vlan[15]+" | i active","show run int Vlan"+_tmp_up_vlan[15],#30,31
        "show vlan id "+_tmp_up_vlan[16]+" | i active","show run int Vlan"+_tmp_up_vlan[16],#32,33
        "show vlan id "+_tmp_up_vlan[17]+" | i active","show run int Vlan"+_tmp_up_vlan[17],#34,35
        "show vlan id "+_tmp_up_vlan[18]+" | i active","show run int Vlan"+_tmp_up_vlan[18],#36,37
        "show vlan id "+_tmp_up_vlan[19]+" | i active","show run int Vlan"+_tmp_up_vlan[19],#38,39
        "show vlan id "+_tmp_up_vlan[20]+" | i active","show run int Vlan"+_tmp_up_vlan[20],#40,41
        "show vlan id "+_tmp_up_vlan[21]+" | i active","show run int Vlan"+_tmp_up_vlan[21],#42,43
        "show vlan id "+_tmp_up_vlan[22]+" | i active","show run int Vlan"+_tmp_up_vlan[22],#44,45
        "show vlan id "+_tmp_up_vlan[23]+" | i active","show run int Vlan"+_tmp_up_vlan[23],#46,47
        "show run interface "+_tmp_up_int[0],#48
        "show run interface "+_tmp_up_int[1],#49
        "show run interface "+_tmp_up_int[2],#50
        "show run interface "+_tmp_up_int[3],#51
        "show run | section route-map",#52
        "show run | section prefix-list",#53
        "show run | i rp-address|ssm",#54
        "show ip arp",#55
        "show run | section bgp", #56
        "show inv",#57
        "show ver"#58
        ]
        _uplink_cmd_array[_for][_dev] = _tmp_cmd_array

#Test Block
#--_uplink_raw_out
_sess_id_uplinks,_uplinks_tuples,_fdi = [],[],0
if not _dev_sim_mode:
    _uplink_raw_out,_multithread_results = {},[]
    with concurrent.futures.ThreadPoolExecutor() as executor:
        for _for in _uplink_cmd_array:
            _uplink_raw_out[_for] = {}
            for _dev in _uplink_cmd_array[_for]:
                _sess_id_uplinks.append('_'+_for+'_'+_dev)
                _uplinks_tuples.append([_for,_dev])
                _multithread_results.append(executor.submit(_dev_simple_op,_dev,_uplink_cmd_array[_for][_dev],_for,'_'+_for+'_'+_dev))
                _thread_sess_list[_thread_num]='_'+_for+'_'+_dev
                _thread_num+=1
                time.sleep(.2)
            time.sleep(.2)
        for _result in concurrent.futures.as_completed(_multithread_results):
            _o,_out = _result.result(),[]
            for _k in _o:
                _out=_o[_k]
                _uplink_raw_out[_uplinks_tuples[_fdi][0]][_uplinks_tuples[_fdi][1]] = _out
                _fdi+=1
    with open('Output/_uplink_raw_out.txt', 'w') as fp:
        json.dump(_uplink_raw_out, fp)
else:
    with open('Output/_uplink_raw_out.txt','r') as f:
        _uplink_raw_out = json.load(f)
#End Test Block
#--_dev_struct_child
#--_dev_struct_verbose
_dev_struct_child,_dev_struct_verbose,_glob_subnet_array,_t_s_a ={},{},{},[]
for _for in _uplink_raw_out:
    _dev_struct_child[_for],_glob_subnet_array[_for],_vlist,_ilist = {},{},[],[]
    _glob_subnet_array[_for]['network']=[]
    for _dev in _uplink_raw_out[_for]:
        _dev_struct_child[_for][_dev],_dev_struct_verbose[_dev],_subnets,_t_s_a,_g_s_a,flag={},{},[],[],[],{"bgp":False,"multicast":False}
        _tmp_raw_out = _uplink_raw_out[_for][_dev]
        _bgp_raw = _tmp_raw_out[56]
        _mcast = list(_tmp_raw_out[_n] for _n in range(32,35))#Interface
        
        _arp_raw = _tmp_raw_out[55]
        _arp = _format_table(_arp_raw,"arp",_dev)
        _inv = _format_table(_tmp_raw_out[57],"inv",_dev)
        _ver = _format_table(_tmp_raw_out[58],"ver",_dev)
        
        _vlist =list(_v.split()[0] for _v in list(_tmp_raw_out[_n] for _n in range(0,48,2)) if "active" in _v)
        _vint =list(re.findall(r'interface\sVlan\d+',_tmp_raw_out[_n])[0].replace("interface","").strip() for _n in range(1,48,2) if _tmp_raw_out[_n]!='')
        _intf =list(re.findall(r'interface\s\w+\d\/\d+',_tmp_raw_out[_n])[0].replace("interface","").strip() for _n in range(48,52) if _tmp_raw_out[_n] !='')
        _prod_vlan =list(re.findall(r'interface\sVlan\d+',_tmp_raw_out[_n])[0].replace("interface Vlan","").strip() for _n in range(1,48,2) if _tmp_raw_out[_n]!='')
        _tmp = list(True for _n in range(1,48,2) if "ip pim" in _tmp_raw_out[_n] or "ip igmp" in _tmp_raw_out[_n])
        flag["multicast"]= True if len(list(True for _n in range(1,48,2) if "ip pim" in _tmp_raw_out[_n] or "ip igmp" in _tmp_raw_out[_n]))>0 else False
        _v_s =list([re.findall(r'interface\sVlan\d+',_tmp_raw_out[_n])[0].replace("interface Vlan","").strip(),re.findall(r'ip\saddress\s\d+\.\d+\.\d+\.\d+\/?\d*\s?\d*\.?\d*\.?\d*\.?\d*',_tmp_raw_out[_n])[0].replace("ip address","").strip()] for _n in range(1,48,2) if _tmp_raw_out[_n]!='')
        for _v in _v_s: _glob_vlan_array[_v[0]]['subnet'] = ip_address(_v[1])["Network"]+"/"+ip_address(_v[1])["CIDR"]
        _subnets = list(re.findall(r'ip\saddress\s\d+\.\d+\.\d+\.\d+\/?\d*\s?\d*\.?\d*\.?\d*\.?\d*',_tmp_raw_out[_n])[0].replace("ip address","").strip() for _n in range(1,48,2) if _tmp_raw_out[_n]!='')
        _t_s_a = list(ip_address(_s)["Network"]+"/"+ip_address(_s)["CIDR"] for _s in _subnets)
        flag["bgp"]= True if len(list(True for _s in _t_s_a if "network "+_s in _bgp_raw))>0 else False
        _dev_struct_child[_for][_dev].update({'vlan':_vlist,'prod_vlan':_prod_vlan,'svi':_vint,'int':_intf,"subnets":_t_s_a,'flag':flag})
        l = _bgp_raw.splitlines()
        _peer = list([re.findall(r'\d+\.\d+\.\d+\.\d+',l[_n])[0],l[_n+2].replace("description","").strip()] for _n in range(len(l)-2) if re.search(r'neighbor\s\d+\.\d+\.\d+\.\d+',l[_n]))
        _network = list(re.sub(r'network\s',"",_el) for _el in re.findall(r'network\s\d+\.\d+\.\d+\.\d+\/\d+',_bgp_raw))
        _dev_struct_verbose[_dev].update({"_for":_for,"inv":_inv,"ver":_ver,"arp":_arp,"bgp":{"peer":_peer,"network":_network}})
        _glob_subnet_array[_for]['network'].append(_t_s_a)
        for _vl in _vlist:
            _glob_vlan_array[_vl].update({"tag":_dev_struct_brief[_for][_dev]})
            if _vl in _prod_vlan:
                _glob_vlan_array[_vl].update({"active":True})
            else:
                _glob_vlan_array[_vl].update({"active":False})
            
#_dev_struct_config
_dev_struct_config,_t_s_a ={},[]
for _for in _uplink_raw_out:
    _dev_struct_config[_for]= {}
    for _dev in _uplink_raw_out[_for]:
        flag,_vlist_conf_raw,_intf_conf_raw,_svi_conf_raw = {"bgp":False,"multicast":False},[],[],[]
        #raw-out
        _tmp_raw_out = _uplink_raw_out[_for][_dev]
        _bgp_raw = _tmp_raw_out[56]
        _mcast = list(_tmp_raw_out[_n] for _n in range(52,55))
        #tmp-list
        _vlist =list(_v.split()[0] for _v in list(_tmp_raw_out[_n] for _n in range(0,48,2)) if "active" in _v)
        _vint =list(re.findall(r'interface\sVlan\d+',_tmp_raw_out[_n])[0].replace("interface","").strip() for _n in range(1,48,2) if _tmp_raw_out[_n]!='')
        _intf =list(re.findall(r'interface\s\w+\d\/\d+',_tmp_raw_out[_n])[0].replace("interface","").strip() for _n in range(48,52) if _tmp_raw_out[_n] !='')
        _prod_vlan =list(re.findall(r'interface\sVlan\d+',_tmp_raw_out[_n])[0].replace("interface Vlan","").strip() for _n in range(1,48,2) if _tmp_raw_out[_n]!='')
        #set-flags
        flag["multicast"]= True if len(list(True for _n in range(1,48,2) if "ip pim" in _tmp_raw_out[_n] or "ip igmp" in _tmp_raw_out[_n]))>0 else False
        _v_s =list([re.findall(r'interface\sVlan\d+',_tmp_raw_out[_n])[0].replace("interface Vlan","").strip(),re.findall(r'ip\saddress\s\d+\.\d+\.\d+\.\d+\/?\d*\s?\d*\.?\d*\.?\d*\.?\d*',_tmp_raw_out[_n])[0].replace("ip address","").strip()] for _n in range(1,48,2) if _tmp_raw_out[_n]!='')
        _subnets = list(re.findall(r'ip\saddress\s\d+\.\d+\.\d+\.\d+\/?\d*\s?\d*\.?\d*\.?\d*\.?\d*',_tmp_raw_out[_n])[0].replace("ip address","").strip() for _n in range(1,48,2) if _tmp_raw_out[_n]!='')
        _t_s_a = list(ip_address(_s)["Network"]+"/"+ip_address(_s)["CIDR"] for _s in _subnets)
        flag["bgp"]= True if len(list(True for _s in _t_s_a if "network "+_s in _bgp_raw))>0 else False
        
        _vlist_conf,_vlist_conf_raw,_prod_vlan_conf,_svi_conf,_intf_conf,_bgp_conf = [],[],[],[],[],''
        _dev_struct_config[_for][_dev] = {}
        #vlan
        for _v in _vlist:
            tmp = 'vlan '+_v+'\n name '+_glob_vlan_array[_v]["desc"]
            _vlist_conf.append(tmp)
            _vlist_conf_raw.append('!\nvlan '+_v+'\n name '+_glob_vlan_array[_v]["desc"])
        #prod_vlan
        for _v in _prod_vlan:
            tmp = 'vlan '+_v+'\n name '+_glob_vlan_array[_v]["desc"]
            _prod_vlan_conf.append(tmp)
        #svi
        _svi_conf = []
        _svi_conf_raw = []
        for _n in range(1,48,2):
            _c_n,_c_n_r = _tmp_raw_out[_n],_tmp_raw_out[_n]
            if _c_n != '' and _c_n_r !='':
                _c_n = re.sub(r'hsrp\s\d+','hsrp 1',_c_n)    
                _c_n = _c_n.replace("no shutdown","shutdown").replace("access-group deny-to-core in","access-group deny-to-core_ra in")
                _tv = re.findall(r'interface\sVlan\d+',_c_n)[0].replace("interface Vlan","").strip() if re.search(r'interface\sVlan\d+',_c_n) else None
                _c_n = re.sub(r'description\s.*','description $$$'+_glob_vlan_array[_tv]['desc']+'$$',_c_n) if _tv else _c_n
                _c_n = re.sub(r'interface\sVlan\d+','interface $$$Vlan'+_tv+'$$',_c_n) if re.search(r'interface\sVlan\d+',_c_n) else _c_n
                _c_n = str('\n'.join(list(_l for _l in _c_n.splitlines() if "ip ospf" not in _l and "router ospf" not in _l)))
                _svi_conf.append(_c_n)
                _svi_conf_raw.append(_c_n_r)
        #int
        _intf_conf = list(_tmp_raw_out[_n] for _n in range(48,52) if _tmp_raw_out[_n] !='')
        _intf_conf_raw = list(_tmp_raw_out[_n] for _n in range(48,52) if _tmp_raw_out[_n] !='')
        #subnets
        #flag
        #bgp
        _bgp_conf=str(str(re.findall(r'router\sbgp\s\d+\.?\d*',_bgp_raw)[0].strip() if re.search(r'router\sbgp\s\d+\.?\d*',_bgp_raw) else "")+'''
'''+str("address-family ipv4 unicast" if re.search(r'router\sbgp\s\d+\.?\d*',_bgp_raw) else "" )+'''
'''+str('\n'.join(list("network "+_net for _net in _t_s_a if _net in _bgp_raw)))).strip()
        #multicast ------ route_map, svi_conf, int_conf, pref_list, rp_ssm
        _multicast_conf= {'route_map':'','svi_conf':'','int_conf':'','pref_list':'','rp_ssm':''}
        _r_m = _mcast[0].splitlines()
        _m_route_map = str('\n'.join(list(_r_m[i]+'\n'+str(_r_m[i+1] if "route-map" not in _r_m[i+1] else "") for i in range(len(_r_m)) if "permitted_groups_DR_Local" in _r_m[i]))).strip()
        _s_c = _svi_conf[0].splitlines() if len(_svi_conf)>0 else []
        _m_svi_conf = str('\n'.join(list(_l.strip() for _l in _s_c if "ip pim" in _l or  "ip igmp" in _l))).strip()
        _m_int_conf = str('\n'.join(list(_l.strip() for _l in _s_c if "ip pim spar" in _l or  "ip pim hello" in _l))).strip()
        _p_l = _mcast[1].splitlines()
        _m_pref_list = str('\n'.join(list(re.sub(r'\sseq\s\d+','',_l) for _l in _p_l if "prefix-list DR_Local_Mcast_Groups seq" in _l)))
        _m_rp_ssm = _mcast[2].strip()
        _multicast_conf= {'route_map':_m_route_map,'svi_conf':_m_svi_conf,'int_conf':_m_int_conf,'pref_list':_m_pref_list,'rp_ssm':_m_rp_ssm}
        #construct
        _struct = {'vlan':_vlist_conf,
                   'vlan_raw':_vlist_conf_raw,
                   'prod_vlan':_prod_vlan_conf,
                   'svi':_svi_conf,
                   'svi_raw':_svi_conf_raw,
                   'int':_intf_conf,
                   'int_raw':_intf_conf_raw,
                   "subnets":_t_s_a,
                   'flag':flag,
                   'bgp':_bgp_conf,
                   'multicast':_multicast_conf}
        _dev_struct_config[_for][_dev].update(_struct)
